// Gretchen Manco
// EE380
// Write to LCD example


// CONFIG1H
#pragma config FOSC = INTIO7    // Oscillator Selection bits (Internal oscillator block, CLKOUT function on OSC2)
#pragma config PLLCFG = OFF     // 4X PLL Enable (Oscillator used directly)
#pragma config PRICLKEN = ON    // Primary clock enable bit (Primary clock is always enabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor disabled)
#pragma config IESO = OFF       // Internal/External Oscillator Switchover bit (Oscillator Switchover mode disabled)

// CONFIG2L
#pragma config PWRTEN = OFF     // Power-up Timer Enable bit (Power up timer disabled)
#pragma config BOREN = SBORDIS  // Brown-out Reset Enable bits (Brown-out Reset enabled in hardware only (SBOREN is disabled))
#pragma config BORV = 190       // Brown Out Reset Voltage bits (VBOR set to 1.90 V nominal)

// CONFIG2H
#pragma config WDTEN = ON       // Watchdog Timer Enable bits (WDT is always enabled. SWDTEN bit has no effect)
#pragma config WDTPS = 32768    // Watchdog Timer Postscale Select bits (1:32768)

// CONFIG3H
#pragma config CCP2MX = PORTC1  // CCP2 MUX bit (CCP2 input/output is multiplexed with RC1)
#pragma config PBADEN = ON      // PORTB A/D Enable bit (PORTB<5:0> pins are configured as analog input channels on Reset)
#pragma config CCP3MX = PORTB5  // P3A/CCP3 Mux bit (P3A/CCP3 input/output is multiplexed with RB5)
#pragma config HFOFST = ON      // HFINTOSC Fast Start-up (HFINTOSC output and ready status are not delayed by the oscillator stable status)
#pragma config T3CMX = PORTC0   // Timer3 Clock input mux bit (T3CKI is on RC0)
#pragma config P2BMX = PORTD2   // ECCP2 B output mux bit (P2B is on RD2)
#pragma config MCLRE = EXTMCLR  // MCLR Pin Enable bit (MCLR pin enabled, RE3 input pin disabled)

// CONFIG4L
#pragma config STVREN = ON      // Stack Full/Underflow Reset Enable bit (Stack full/underflow will cause Reset)
#pragma config LVP = OFF         // Single-Supply ICSP Enable bit (Single-Supply ICSP enabled if MCLRE is also 1)
#pragma config XINST = OFF      // Extended Instruction Set Enable bit (Instruction set extension and Indexed Addressing mode disabled (Legacy mode))

// CONFIG5L
#pragma config CP0 = OFF        // Code Protection Block 0 (Block 0 (000800-003FFFh) not code-protected)
#pragma config CP1 = OFF        // Code Protection Block 1 (Block 1 (004000-007FFFh) not code-protected)
#pragma config CP2 = OFF        // Code Protection Block 2 (Block 2 (008000-00BFFFh) not code-protected)
#pragma config CP3 = OFF        // Code Protection Block 3 (Block 3 (00C000-00FFFFh) not code-protected)

// CONFIG5H
#pragma config CPB = OFF        // Boot Block Code Protection bit (Boot block (000000-0007FFh) not code-protected)
#pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM not code-protected)

// CONFIG6L
#pragma config WRT0 = OFF       // Write Protection Block 0 (Block 0 (000800-003FFFh) not write-protected)
#pragma config WRT1 = OFF       // Write Protection Block 1 (Block 1 (004000-007FFFh) not write-protected)
#pragma config WRT2 = OFF       // Write Protection Block 2 (Block 2 (008000-00BFFFh) not write-protected)
#pragma config WRT3 = OFF       // Write Protection Block 3 (Block 3 (00C000-00FFFFh) not write-protected)

// CONFIG6H
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) not write-protected)
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot Block (000000-0007FFh) not write-protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write-protected)

// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protection Block 0 (Block 0 (000800-003FFFh) not protected from table reads executed in other blocks)
#pragma config EBTR1 = OFF      // Table Read Protection Block 1 (Block 1 (004000-007FFFh) not protected from table reads executed in other blocks)
#pragma config EBTR2 = OFF      // Table Read Protection Block 2 (Block 2 (008000-00BFFFh) not protected from table reads executed in other blocks)
#pragma config EBTR3 = OFF      // Table Read Protection Block 3 (Block 3 (00C000-00FFFFh) not protected from table reads executed in other blocks)

// CONFIG7H
#pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot Block (000000-0007FFh) not protected from table reads executed in other blocks)

#include <p18f46k22.h>
#include <xc.h>
#include <stdio.h>
#include <stdint.h>
#include <string.h>





typedef unsigned char BYTE;

void LCDInit(void);    //Initialize the LCD module per Ocular specifications
void Delay(void);
void Delay750us(void); 
void LongDelay(void); 
void LCDbusy(void);     // NOTE:  Busy bit does not work, this routine is just a time delay
void LCDWriteNibble(BYTE,BYTE);
// 1st BYTE is nibble to write with nibble in upper four bits
// 2nd BYTE is 0x0 for instruction register, 0x1 for data register
void LCDWrite(BYTE);	// Write characters to the LCD panel
//void TextDisplay(unsigned char*);  // Write a constant string to the LCD
void TextDisplay(unsigned char *text,int string_Length);
void LCDLine1(void);	// Set LCD to Line 1
void LCDLine2(void);	// Set LCD to Line 2
void ShiftCursor(void);	// Shift cursor right by 1 location
void CursorOn(void);    // Turn on cursor and have it blink
void DisplayClr(void);	// Clear LCD display

#define	LCD_PWR		LATDbits.LATD7		// LCD power pin
#define	LCD_EN		LATDbits.LATD6		// LCD enable
#define	LCD_RW		LATDbits.LATD5		// LCD read/write line
#define	LCD_RS		LATDbits.LATD4		// LCD register select line

#define	LCD_EN_DIR	TRISDbits.TRISD6    // 6	
#define	LCD_RW_DIR	TRISDbits.TRISD5    // 5	
#define	LCD_RS_DIR	TRISDbits.TRISD4    // 4


////////////////////////////////////////////////////
//Function to send initialization information to LCD
////////////////////////////////////////////////////
void LCDInit()
{
	TRISD = 0x00;
	LCD_PWR=1;   // to power up the LCD

//  These values were obtained from Ocular tech support to properly
//  initialize the LCD module
	Delay();
	LCDWriteNibble(0x20,0x0); 	//#1 control sequence (?)
	Delay750us();	
	LCDWriteNibble(0x20,0x0); 	//#2 control sequence (function set 4-bit mode, 
	LCDWriteNibble(0x80,0x0); 	//#2 control sequence   2-line display with 5x7 dots)
	Delay750us(); 
	LCDWriteNibble(0x00,0x0);	//#3 control sequence (turn display on)
	LCDWriteNibble(0xC0,0x0);	//#3 control sequence 
	Delay750us(); 
	LCDWriteNibble(0x00,0x0); 	//#4 control sequence (clear display)
	LCDWriteNibble(0x10,0x0); 	//#4 control sequence 
	Delay750us();
	LongDelay();
	LCDWriteNibble(0x00,0x0); 	//#5 control sequence (return cursor to home position)
	LCDWriteNibble(0x20,0x0); 	//#5 control sequence 
}

////////////////////////////////////////////////////
//Function to generate a delay for timing purposes
////////////////////////////////////////////////////
void Delay(void) 
{
	int i;
	Nop();
	for(i=0;i<10300;i++)
	{
		Nop();
	}
}

////////////////////////////////////////////////////
//Function to generate a 750us delay for timing purposes
////////////////////////////////////////////////////
void Delay750us(void) 
{
	int i;
	Nop();
	for(i=0;i<40;i++)
	{
	}
	Nop();
}

////////////////////////////////////////////////////
//Function to generate a delay for timing purposes
////////////////////////////////////////////////////
void LongDelay(void) 
{
	int i;
	Nop();
	for(i=0;i<1000;i++)
	{
		Nop();
	}
	Nop();
}

////////////////////////////////////////////////////
//Function to read busy flag (not really performed)
////////////////////////////////////////////////////
void LCDbusy(void )
{
	Delay750us();
	Delay750us();
	Delay750us();
	Delay750us();
	Delay750us();
	Delay750us();
}


/////////////////////////////////////////////////////////////////////////
// Function to write a nibble
// (can be inststucion or data depending on the second passed data 0 or 1)
//////////////////////////////////////////////////////////////////////////
void LCDWriteNibble( BYTE data,BYTE b)
{
	BYTE tempdata;
	tempdata=data;
	if(b==0)
	{
	LCD_RS=0; 	//Select instruction register
	}
	else
	{
	LCD_RS=1;		//Select data register
	}

	LCD_RW=0;  	//RW - set write mode

	LATDbits.LATD0=0;
	LATDbits.LATD1=0;
	LATDbits.LATD2=0;
	LATDbits.LATD3=0;
	Nop();
	Nop();
	LCD_EN=1;		//set up enable

///////////  Write Nibble //////////////////	
//bit4	
	tempdata=(tempdata&0x80);
	if(	tempdata==0x80)
	{
	LATDbits.LATD3=1;
	}
	else
	{
	LATDbits.LATD3=0;
	}
	tempdata=data;
//bit3
	tempdata=(tempdata&0x40);
	if(	tempdata==0x40)
	{
	LATDbits.LATD2=1;
	}
	else
	{
	LATDbits.LATD2=0;
	}
	tempdata=data;
//bit 2
	tempdata=(tempdata&0x20);
	if(	tempdata==0x20)
	{
	LATDbits.LATD1=1;
	}
	else
	{
	LATDbits.LATD1=0;
	}
	tempdata=data;
//bit1
	tempdata=(tempdata&0x10);
	if(	tempdata==0x10)
	{
	LATDbits.LATD0=1;
	}
	else
	{
	LATDbits.LATD0=0;
	}
	Nop();
	Nop();
	LCD_EN =0;	
}


////////////////////////////////////////////////////
//Function to write data into the display
////////////////////////////////////////////////////
void LCDWrite(BYTE chardata)
{
	LCDbusy();
	LCDWriteNibble(chardata,0x1); 	
	chardata=chardata<<4;
	LCDbusy();
	LCDWriteNibble(chardata,0x1); 
}


////////////////////////////////////////////////////
// Function to write a constant string to the LCD
////////////////////////////////////////////////////
void TextDisplay(unsigned char *text,int string_Length) {
    int i = 0;
    for(i = 0;i < string_Length;i++)
    {
        if(i == 16)
            LCDLine2();
        if(i == string_Length)
            break;
        LCDWrite(*text);
        text++;
    }
}



////////////////////////////////////////////////////
// Function to goto Line1
////////////////////////////////////////////////////
void LCDLine1(void)
{
	LCDbusy();// instruction 0x80 for going to line 1
	LCDWriteNibble(0x80,0x0); 	
	LCDbusy();
	LCDWriteNibble(0x00,0x0);
}


////////////////////////////////////////////////////
// Function to goto Line2
////////////////////////////////////////////////////
void LCDLine2(void)
{
	LCDbusy();// instruction 0xC0 for going to line 2
	LCDWriteNibble(0xC0,0x0); 	
	LCDbusy();
	LCDWriteNibble(0x00,0x0);
}


////////////////////////////////////////////////////
// Function to clear the LCD display
////////////////////////////////////////////////////
void DisplayClr (void)
{	
	// ECT358 place your code here
}


////////////////////////////////////////////////////
// Function to shift the cursor 1 space to the right
////////////////////////////////////////////////////
void ShiftCursor (void)
{
	// ECT358 place your code here
}


////////////////////////////////////////////////////
// Function to turn cursor on and have it blink
////////////////////////////////////////////////////
void CursorOn (void)
{
	// ECT358 place your code here
}	



int main(void) {
    char title[]="Overflow";
    int tlen=strlen(title);
    LCDInit();
     TextDisplay(title,tlen);  
     while(1);
    }


// END
